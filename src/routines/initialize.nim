import std/[os, streams, strutils]
import pkg/[yaml]
import ../types/[project]
import ../[output], ./git

proc initializeProject*(project: Project) =
  displayMessage("<blue>initializing<reset>", "project " & project.name)

  createDir(project.name)
  var project = deepCopy(project)

  case project.kind
  of ProjectKind.Binary:
    createDir(project.name / "src")
    writeFile(
      project.name / "src" / project.name & ".nim",
      """
# This file was automatically generated by Neo.
# Perhaps this is the start of something neat?

proc main {.inline.} =
  echo "Hello world!"
  quit(QuitSuccess)

when isMainModule: main()
      """,
    )
    project.binaries = @[project.name]
  of ProjectKind.Library:
    createDir(project.name / "src")
    createDir(project.name / "src" / project.name)
    writeFile(
      project.name / "src" / project.name & ".nim",
      """
# This file was automatically generated by Neo.
# You can import stuff here, and files that import this file as a module
# will automatically get all the publically marked and exported symbols.
import $1/submodule

proc greet*(name: string) =
  echo "Greetings from $1, " & name

export submodule
""" %
        [project.name],
    )
    writeFile(
      project.name / "src" / project.name / "submodule.nim",
      """
# This file was automatically generated by Neo.
# This is a submodule. It's imported in the main library file.

proc greetInHindi*(name: string) =
  echo "$1 se namaste, " & name
""" %
        [project.name],
    )
  of ProjectKind.Hybrid:
    assert off, "I hate you and everything you stand for"
      # TODO: implement this, I'm too lazy

  project.save(project.name / "neo.yml")

  if not gitInit(project.name):
    displayMessage(
      "<yellow>warning<reset>",
      "Failed to initialize Git repository for your new project.",
    )
