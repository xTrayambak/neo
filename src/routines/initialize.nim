import std/[os, strutils]
import ../types/[project]
import ../[output], ./git

proc initializeProject*(project: Project) =
  displayMessage("<blue>initializing<reset>", "project " & project.name)

  createDir(project.name)
  var project = deepCopy(project)
  project.version = "0.1.0"

  case project.package.kind
  of ProjectKind.Binary:
    createDir(project.name / "src")
    writeFile(
      project.name / "src" / project.name & ".nim",
      """
# This file was automatically generated by Neo.
# Perhaps this is the start of something neat?

proc main {.inline.} =
  echo "Hello world!"
  quit(QuitSuccess)

when isMainModule:
  main()
      """,
    )
    project.package.binaries = @[project.name]
  of ProjectKind.Library:
    createDir(project.name / "src")
    createDir(project.name / "src" / project.name)
    writeFile(
      project.name / "src" / project.name & ".nim",
      """
# This file was automatically generated by Neo.
# You can import stuff here, and files that import this file as a module
# will automatically get all the publically marked and exported symbols.
import pkg/$1/submodule

export submodule
""" %
        [project.name],
    )
    writeFile(
      project.name / "src" / project.name / "submodule.nim",
      """
# This file was automatically generated by Neo.
# This is a submodule. It's imported in the main library file.

func add*(a, b: int): int =
  a + b
""",
    )

    createDir(project.name / "tests")
    writeFile(
      project.name / "tests" / "test001.nim",
      """
# This is a basic test case that explains how Nim's
# std/unittest module works.
import std/unittest
import pkg/$1

suite "a set of tests":
  test "basics":
    check(add(1, 1) == 2)
    check(add(2, 3) == 5)

  test "other tests":
    check(add(2, 2) == 4)
    check(add(4, 4) == 8)
  """ %
        [project.name],
    )
    writeFile(
      project.name / "tests" / "config.nims", "switch(\"path\", \"$projectDir/../src\")"
    )
  of ProjectKind.Hybrid:
    createDir(project.name / "src")
    createDir(project.name / "src" / project.name)
    writeFile(
      project.name / "src" / project.name & ".nim",
      """
# This file was automatically generated by Neo.
# It will be compiled into a binary called $1 when `neo run` or `neo build`
# is called.
import pkg/$1/submodule

proc main() {.inline.} =
  echo add(1, 2)

when isMainModule:
  main()
""" %
        [project.name],
    )

    writeFile(
      project.name / "src" / project.name / "submodule.nim",
      """
# This file was automatically generated by Neo.
# This is a submodule. It's imported in the main file.

func add*(a, b: int): int =
  a + b
""",
    )

    createDir(project.name / "tests")
    writeFile(
      project.name / "tests" / "test001.nim",
      """
# This is a basic test case that explains how Nim's
# std/unittest module works.
import std/unittest
import pkg/$1/submodule

suite "a set of tests":
  test "basics":
    check(add(1, 1) == 2)
    check(add(2, 3) == 5)

  test "other tests":
    check(add(2, 2) == 4)
    check(add(4, 4) == 8)
  """ %
        [project.name],
    )
    writeFile(
      project.name / "tests" / "config.nims", "switch(\"path\", \"$projectDir/../src\")"
    )

  project.save(project.name / "neo.toml")

  if not gitInit(project.name):
    displayMessage(
      "<yellow>warning<reset>",
      "Failed to initialize Git repository for your new project.",
    )
